{
    "docs": [
        {
            "location": "/", 
            "text": "DPMeansClustering.jl Documentation\n\n\nDPMeansClustering.jl\n is a package for fast approximate clustering without a fixed number of clusters. Based on Dirichlet Processes.\n\n\n\n\n\n\nClustering Functions\n\n\n\n\n\n\nDPMeansClustering.dp_centers\n\n\n\n\nDPMeansClustering.dp_means", 
            "title": "Home"
        }, 
        {
            "location": "/#dpmeansclusteringjl-documentation", 
            "text": "DPMeansClustering.jl  is a package for fast approximate clustering without a fixed number of clusters. Based on Dirichlet Processes.    Clustering Functions    DPMeansClustering.dp_centers   DPMeansClustering.dp_means", 
            "title": "DPMeansClustering.jl Documentation"
        }, 
        {
            "location": "/dp/", 
            "text": "Clustering Functions\n\n\n\n\nDPMeansClustering.dp_centers\n\n\nDPMeansClustering.dp_means\n\n\n\n\n#\n\n\nDPMeansClustering.dp_means\n \n \nFunction\n.\n\n\ndp_means(input_vectors::Array{Vector{Int}, 1}, radius::Float64; verbose = false)\n\n\n\n\nCluster \ninput_vectors\n using euclidean distance metric and arithmetic mean, where a  vector with distance greater than \nradius\n from the nearest cluster forms a new cluster.\n\n\nReturns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of \ninput_vectors\n grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in \ninput_vectors\n closest to the respective centroid.\n\n\nExample:\n\n\ninputs = [[5, 0, 0, 1, 1, 5],\n          [5, 1, 0, 0, 1, 5],\n          [5, 0, 1, 0, 1, 5],\n          [0, 4, 6, 2, 0, 0],\n          [0, 4, 6, 1, 1, 0],\n          [0, 4, 6, 1, 0, 1]]\nradius = 3.0\n\u03bcs, sizes, indices, centroids = dp_means(inputs, radius)\n\u03bcs == [[5, 1/3, 1/3, 1/3, 1, 5],\n             [0, 4, 6, 4/3, 1/3, 1/3]]\nsizes == [3, 3]\nindices == [[1, 2, 3], [4, 5, 6]]\ncentroids == [1, 4]\n\n\n\n\nsource\n\n\n#\n\n\nDPMeansClustering.dp_centers\n \n \nFunction\n.\n\n\ndp_centers(inputs, radius::Float64; distfunc = euclidean, center = mean, verbose = false, cycle_lim = 30)\n\n\n\n\nCluster \ninput_vectors\n using given distance and mean calculations, where a  vector with distance greater than \nradius\n from the nearest cluster forms a new cluster. Runs a maximum of \ncycle_lim\n iterations.\n\n\nReturns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of \ninput_vectors\n grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in \ninput_vectors\n closest to the respective centroid.\n\n\nThis is a generalization of \ndp_means\n.\n\n\nsource\n\n\ndp_centers(inputs, radii::Vector{Float64}; distfunc = euclidean, center = mean, verbose = false, cycle_lim = [30...])\n\n\n\n\nCluster \ninput_vectors\n using given distance and mean calculations recursively; \nradii\n should be an array of decreasing values, where each value is the radius of a successively finer clustering operation. During each clustering, a vector with distance greater than \nradius\n from the nearest cluster forms a new cluster. Runs a maximum of \ncycle_lims\n iterations during each cluster.\n\n\nReturns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of \ninput_vectors\n grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in \ninput_vectors\n closest to the respective centroid.\n\n\nThis is a recursive implementation of \ndp_centers(inputs, radius)\n for faster clustering.\n\n\nsource", 
            "title": "dp"
        }, 
        {
            "location": "/dp/#clustering-functions", 
            "text": "DPMeansClustering.dp_centers  DPMeansClustering.dp_means   #  DPMeansClustering.dp_means     Function .  dp_means(input_vectors::Array{Vector{Int}, 1}, radius::Float64; verbose = false)  Cluster  input_vectors  using euclidean distance metric and arithmetic mean, where a  vector with distance greater than  radius  from the nearest cluster forms a new cluster.  Returns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of  input_vectors  grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in  input_vectors  closest to the respective centroid.  Example:  inputs = [[5, 0, 0, 1, 1, 5],\n          [5, 1, 0, 0, 1, 5],\n          [5, 0, 1, 0, 1, 5],\n          [0, 4, 6, 2, 0, 0],\n          [0, 4, 6, 1, 1, 0],\n          [0, 4, 6, 1, 0, 1]]\nradius = 3.0\n\u03bcs, sizes, indices, centroids = dp_means(inputs, radius)\n\u03bcs == [[5, 1/3, 1/3, 1/3, 1, 5],\n             [0, 4, 6, 4/3, 1/3, 1/3]]\nsizes == [3, 3]\nindices == [[1, 2, 3], [4, 5, 6]]\ncentroids == [1, 4]  source  #  DPMeansClustering.dp_centers     Function .  dp_centers(inputs, radius::Float64; distfunc = euclidean, center = mean, verbose = false, cycle_lim = 30)  Cluster  input_vectors  using given distance and mean calculations, where a  vector with distance greater than  radius  from the nearest cluster forms a new cluster. Runs a maximum of  cycle_lim  iterations.  Returns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of  input_vectors  grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in  input_vectors  closest to the respective centroid.  This is a generalization of  dp_means .  source  dp_centers(inputs, radii::Vector{Float64}; distfunc = euclidean, center = mean, verbose = false, cycle_lim = [30...])  Cluster  input_vectors  using given distance and mean calculations recursively;  radii  should be an array of decreasing values, where each value is the radius of a successively finer clustering operation. During each clustering, a vector with distance greater than  radius  from the nearest cluster forms a new cluster. Runs a maximum of  cycle_lims  iterations during each cluster.  Returns (centroid_vectors, cluster_sizes, cluster_indices, centroid_indices) where cluster_indices is an array of arrays of indices of  input_vectors  grouped by cluster, and centroid_indices is an array of values where each value indexes the vector in  input_vectors  closest to the respective centroid.  This is a recursive implementation of  dp_centers(inputs, radius)  for faster clustering.  source", 
            "title": "Clustering Functions"
        }
    ]
}